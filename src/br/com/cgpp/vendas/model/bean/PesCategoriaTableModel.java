package br.com.cgpp.vendas.model.bean;

import java.util.ArrayList;
import java.util.List;

import javax.swing.table.AbstractTableModel;



@SuppressWarnings("serial")
public class PesCategoriaTableModel extends AbstractTableModel{

	/* Lista de SÛcios que representam as linhas. */
	private List<Categoria> linhas;

	/* Array de Strings com o nome das colunas. */
	private String[] colunas = new String[] {
			"Id", "Nome", "DescriÁ„o"};


	public String[] criaColunas(){
		
		return colunas;
	}
	
	/* Cria um SocioTableModel vazio. */
	public PesCategoriaTableModel() {
		linhas = new ArrayList<>();
	}

	/* Cria um SocioTableModel carregado com
	 * a lista de sÛcios especificada. */
	public PesCategoriaTableModel(List<Categoria> listaCat) {
		linhas = new ArrayList<Categoria>(listaCat);
	}


	/* Retorna a quantidade de colunas. */
	@Override
	public int getColumnCount() {
		// Est√° retornando o tamanho do array "colunas".
		// Mas como o array √© fixo, vai sempre retornar 4.
		return colunas.length;
	}

	/* Retorna a quantidade de linhas. */
	@Override
	public int getRowCount() {
		// Retorna o tamanho da lista de sÛcios.
		return linhas.size();
	}

	/* Retorna o nome da coluna no √≠ndice especificado.
	 * Este m√©todo √© usado pela JTable para saber o texto do cabe√ßalho. */
	@Override
	public String getColumnName(int columnIndex) {
		// Retorna o conte√∫do do Array que possui o nome das colunas
		// no √≠ndice especificado.
		return colunas[columnIndex];
	};

	/* Retorna a classe dos elementos da coluna especificada.
	 * Este m√©todo √© usado pela JTable na hora de definir o editor da c√©lula. */
	@Override
	public Class<?> getColumnClass(int columnIndex) {
		// Retorna a classe referente a coluna especificada.
		// Aqui √© feito um switch para verificar qual √© a coluna
		// e retornar o tipo adequado. As colunas s√£o as mesmas
		// que foram especificadas no array "colunas".
		switch (columnIndex) {
		case 0: // Primeira coluna √© o nome, que √© uma String.
			return Integer.class;
		case 1: // Segunda coluna √© o telefone, que tamb√©m √© uma String..
			return String.class;
		case 2:
			return String.class;
		default:
			// Se o √≠ndice da coluna n√£o for v√°lido, lan√ßa um
			// IndexOutOfBoundsException (Exce√ß√£o de √≠ndice fora dos limites).
			// N√£o foi necess√°rio verificar se o √≠ndice da linha √© inv√°lido,
			// pois o prÛprio ArrayList lan√ßa a exce√ß√£o caso seja inv√°lido.
			throw new IndexOutOfBoundsException("columnIndex out of bounds");
		}
	}

	/* Retorna o valor da c√©lula especificada
	 * pelos √≠ndices da linha e da coluna. */
	@Override
	public Object getValueAt(int rowIndex, int columnIndex) {
		// Pega o s√≥cio da linha especificada.
		Categoria cat = linhas.get(rowIndex);

		// Retorna o campo referente a coluna especificada.
		// Aqui √© feito um switch para verificar qual √© a coluna
		// e retornar o campo adequado. As colunas s√£o as mesmas
		// que foram especificadas no array "colunas".
		switch (columnIndex) {
		case 0: // Primeira coluna √© o nome.
			return cat.getIdcategoria();
		case 1: // Segunda coluna √© o telefone.
			return cat.getNome();
		case 2:
			return cat.getDescricao();
		default:
			// Se o √≠ndice da coluna n√£o for v√°lido, lan√ßa um
			// IndexOutOfBoundsException (Exce√ß√£o de √≠ndice fora dos limites).
			// N√£o foi necess√°rio verificar se o √≠ndice da linha √© inv√°lido,
			// pois o pr√≥prio ArrayList lan√ßa a exce√ß√£o caso seja inv√°lido.
			throw new IndexOutOfBoundsException("columnIndex out of bounds");
		}
	}

	/* Seta o valor da c√©lula especificada
	 * pelos √≠ndices da linha e da coluna.
	 * Aqui ele est√° implementado para n√£o fazer nada,
	 * at√© porque este table model n√£o √© edit√°vel. */
	public void setValueAt(Object aValue, int rowIndex, int columnIndex) {};

	/* Retorna um valor booleano que define se a c√©lula em quest√£o
	 * pode ser editada ou n√£o.
	 * Este m√©todo √© utilizado pela JTable na hora de definir o editor da c√©lula.
	 * Neste caso, estar√° sempre retornando false, n√£o permitindo que nenhuma
	 * c√©lula seja editada. */
	@Override
	public boolean isCellEditable(int rowIndex, int columnIndex) {
		return false;
	}


	////////////////////////////////////////////////////////////
	// Os m√©todos declarados at√© aqui foram as implementa√ß√µes //
	// de TableModel, que s√£o continuamente utilizados        //
	// pela JTable para definir seu comportamento,            //
	// por isso o nome Table Model (Modelo da Tabela).        //
	//                                                        //
	// A partir de agora, os m√©todos criados ser√£o            //
	// particulares desta classe. Eles ser√£o √∫teis            //
	// em algumas situa√ß√µes.                                  //
	////////////////////////////////////////////////////////////


	/* Retorna o s√≥cio da linha especificada. */
	public Categoria getCat(int indiceLinha) {
		return linhas.get(indiceLinha);
	}
	
	/* Adiciona um registro. */
	public void addCat(Categoria cat) {
		// Adiciona o registro.
		linhas.add(cat);
		
		// Pega a quantidade de registros e subtrai um para achar
		// o √∫ltimo √≠ndice. √â preciso subtrair um, pois os √≠ndices
		// come√ßam pelo zero.
		int ultimoIndice = getRowCount() - 1;

		// Reporta a mudan√ßa. O JTable recebe a notifica√ß√£o
		// e se redesenha permitindo que visualizemos a atualiza√ß√£o.
		fireTableRowsInserted(ultimoIndice, ultimoIndice);
		//System.out.println("valor id: "+linhas.get(0).getId()+"Ultimo Indice"+ultimoIndice);
	}

	/* Remove a linha especificada. */
	public void removeCat(int indiceLinha) {
		// Remove o s√≥cio da linha especificada.    	
		linhas.remove(indiceLinha);

		// Reporta a mudan√ßa. O JTable recebe a notifica√ß√£o
		// e se redesenha permitindo que visualizemos a atualiza√ß√£o.
		fireTableRowsDeleted(indiceLinha, indiceLinha);
	}

	/* Adiciona uma lista de s√≥cios ao final dos registros. */
	public void addListaCat(List<Categoria> cat) {
		// Pega o tamanho antigo da tabela.
		int tamanhoAntigo = getRowCount();

		// Adiciona os registros.
		linhas.addAll(cat);

		// Reporta a mudan√ßa. O JTable recebe a notifica√ß√£o
		// e se redesenha permitindo que visualizemos a atualiza√ß√£o.
		fireTableRowsInserted(tamanhoAntigo, getRowCount() - 1);
	}

	/* Remove todos os registros. */
	public void limpar() {
		// Remove todos os elementos da lista de sÛcios.
		linhas.clear();

		// Reporta a mudan√ßa. O JTable recebe a notifica√ß√£o
		// e se redesenha permitindo que visualizemos a atualiza√ß√£o.
		fireTableDataChanged();
	}

	/* Verifica se este table model est√° vazio. */
	public boolean isEmpty() {
		return linhas.isEmpty();
	}

}
